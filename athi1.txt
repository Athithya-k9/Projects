#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX 100
#define INF INT_MAX

int graph[MAX][MAX];
int dist[MAX];
int visited[MAX];
int parent[MAX];
int V; // Number of vertices (cities)

int minDistance() {
    int min = INF, min_index;
    for (int v = 0; v < V; v++)
        if (visited[v] == 0 && dist[v] <= min)
            min = dist[v], min_index = v;
    return min_index;
}

void printPath(int j) {
    if (parent[j] == -1)
        return;
    printPath(parent[j]);
    printf("%d ", j);
}

void dijkstra(int src) {
    for (int i = 0; i < V; i++)
        dist[i] = INF, visited[i] = 0, parent[i] = -1;

    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance();
        visited[u] = 1;

        for (int v = 0; v < V; v++)
            if (!visited[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
                parent[v] = u;
                dist[v] = dist[u] + graph[u][v];
            }
    }

    printf("Vertex\t Distance\tPath");
    for (int i = 0; i < V; i++) {
        printf("\n%d -> %d \t\t %d\t\t%d ", src, i, dist[i], src);
        printPath(i);
    }
}

int main() {
    int edges;
    printf("Enter number of cities: ");
    scanf("%d", &V);

    printf("Enter number of roads: ");
    scanf("%d", &edges);

    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            graph[i][j] = 0;

    printf("Enter roads in the format: city1 city2 distance\n");
    for (int i = 0; i < edges; i++) {
        int u, v, w;
        scanf("%d %d %d", &u, &v, &w);
        graph[u][v] = w;
        graph[v][u] = w;
    }

    int start;
    printf("Enter starting city: ");
    scanf("%d", &start);

    dijkstra(start);

    return 0;
}
